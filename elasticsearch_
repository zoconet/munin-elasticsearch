#!/usr/bin/env ruby

require 'rubygems'
require 'net/http'
require 'json'

@host = ENV.member?('host') ? ENV['host']: "localhost"
@node = ENV.member?('node') ? ENV['node']: ""
@port = ENV.member?('port') ? ENV['port']: 9200

def fetch(resource)
    response = Net::HTTP.get_response(URI.parse("http://" + @host + ":" + @port.to_s + resource))
    return JSON.parse(response.body)
end

err = IO.new(2, "w")

mode = $0.gsub /.*\/elasticsearch_/, ""

if ARGV[0] == "config"
    case mode
        when "jvm"
            puts "graph_title elasticsearch JVM heap"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order used committed"
            puts "used.label used bytes";
            puts "used.draw AREA";
            puts "committed.label committed bytes";
            puts "committed.draw LINE2";
            
        when "gc"
            puts "graph_title elasticsearch GC"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Collections per second"
            
            puts "graph_order count_young count_old"
            puts "count_young.label GC young count";
            puts "count_young.type DERIVE";
            puts "count_young.min 0";
            puts "count_young.draw LINE2";
            puts "count_old.label GC old count";
            puts "count_old.type DERIVE";
            puts "count_old.min 0";
            puts "count_old.draw LINE2";
            
        when "cache"
            puts "graph_title elasticsearch cache"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order field filter id"
            puts "field.label field cache";
            puts "field.draw LINE2";
            puts "filter.label filter cache";
            puts "filter.draw LINE2";
            puts "id.label id cache";
            puts "id.draw LINE2";
            
        when "docs"
            puts "graph_title elasticsearch docs"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Documents"
            
            puts "graph_order count"
            puts "count.label document count";
            puts "count.draw LINE2";
            
        when "ops"
            puts "graph_title elasticsearch index operations"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Operations per second"
            
            puts "graph_order index get search delete"
            puts "index.label index";
            puts "index.type DERIVE";
            puts "index.min 0";
            puts "index.draw LINE2";
        
            puts "get.label get";
            puts "get.type DERIVE";
            puts "get.min 0";
            puts "get.draw LINE2";
            
            puts "search.label search";
            puts "search.type DERIVE";
            puts "search.min 0";
            puts "search.draw LINE2";
            
            puts "delete.label delete";
            puts "delete.type DERIVE";
            puts "delete.min 0";
            puts "delete.draw LINE2";
            
        when "store"
            puts "graph_title elasticsearch store"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order size"
            puts "size.label store size";
            puts "size.draw LINE2";
				when "http"
						puts "graph_title elasticsearch http connections"
						puts "graph_category elasticsearch"
						puts "graph_args --base 1000 -l 0"
						      puts "graph_vlabel http connections"

						      puts "graph_order current_open total_opened"
						puts "current_open.label current"
						      puts "current_open.type DERIVE"
						      puts "current_open.draw LINE2"
						puts "total_opened.label total opened"
						      puts "total_opened.type DERIVE"
						      puts "total_opened.draw LINE2"
    end
    exit 0
end

data = {};

begin
    nodes_d = fetch('/_nodes');
    stats_d = fetch( '/_nodes/'+@node+'/stats?jvm=true&fs=true&indices=true');
rescue
    err.puts "Fetch error"
    exit 1
end

node_index = nodes_d['nodes'].find_index {|k,v| v['name'] == @node }
if node_index.nil?
    err.puts "Node node found"
    exit 1
end;

node_stats = stats_d['nodes'][nodes_d['nodes'].keys[node_index]];

data['jvm'] = {
    "used" => node_stats['jvm']['mem']['heap_used_in_bytes'],
    "committed" => node_stats['jvm']['mem']['heap_committed_in_bytes']
}

data['gc'] = {
    "count_old" => node_stats['jvm']['gc']['collectors']['old']['collection_count'],
    "count_young" => node_stats['jvm']['gc']['collectors']['young']['collection_count']
}

data['cache'] = {
    "field" => node_stats['indices']['fielddata']['memory_size_in_bytes'],
    "filter" => node_stats['indices']['filter_cache']['memory_size_in_bytes'],
    "id" => node_stats['indices']['id_cache']['memory_size_in_bytes']
}

data['docs'] = {
    "count" => node_stats['indices']['docs']['count']
}

data['ops'] = {
    "index" => node_stats['indices']['indexing']['index_total'],
    "get" => node_stats['indices']['get']['total'],
    "search" => node_stats['indices']['search']['query_total'],
    "delete" => node_stats['indices']['indexing']['delete_total']
}

data['store'] = {
    "size" => node_stats['indices']['store']['size_in_bytes']
}

data['http'] = {
    "current_open" => node_stats['http']['current_open'],
    "total_opened" => node_stats['http']['total_opened']
}

# print result
data[mode].each do |k, v|
    printf "#{k}.value %s\n", v
end
